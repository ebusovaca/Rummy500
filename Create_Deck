import scala.collection.mutable.ListBuffer


class card(val suit : String, val suitnum: Int, val face: String, val decknum: Int){
def display = face + " of " + suit + "s"  
}

class HAND(var deck: ListBuffer[card]){
	val select = scala.util.Random
	var decklist: ListBuffer[Int] = ListBuffer()
	var clist: ListBuffer[Int] = ListBuffer()
	var dlist: ListBuffer[Int] = ListBuffer()
	var hlist: ListBuffer[Int] = ListBuffer()
	var slist: ListBuffer[Int] = ListBuffer()
	
	def cardIDs  = {
		decklist.remove(0,decklist.length) //first clear if anything is in there
		for (i <- 0 to (deck.length -1)){
  	decklist = decklist += (deck(i).decknum)
  	}
  }
	
	def reorder = {
    cardIDs
    for (i <- 0 to (deck.length -1)){
      var sortdeck = decklist.sorted
      var crd: Int = sortdeck(i)
      this.deck += this.deck(decklist.indexOf(crd)) 
  	  
  	}
    this.deck.remove(0,decklist.length)
  }
	
	def minilists = {
	  reorder
	  clist.remove(0,clist.length)  //first clear if anything is in there
		dlist.remove(0,dlist.length)  
	  hlist.remove(0,hlist.length)
	  slist.remove(0,slist.length)
	  
	   for (i <- 0 to (deck.length -1)){
	    
	    deck(i).suit match {  
	      case "club" => clist = clist += (deck(i).suitnum)
	      case "diamond" => dlist = dlist += (deck(i).suitnum)
	      case "heart" => hlist = hlist += (deck(i).suitnum)
	      case "spade" => slist = slist += (deck(i).suitnum)  
	    }
	   }
	}

  def flushfinder( minilist: ListBuffer[Int], cnt: Int): Boolean = {
    minilists
  	if ((cnt == minilist.length - 2) || (minilist.length < 3)) false
  	else if ( (minilist(cnt)+1 == minilist(cnt+1))  && (minilist(cnt)+2 == minilist(cnt+2))  ) true
    else if ((minilist(0) == 1) && (minilist(1) == 2) && minilist(minilist.length-1) == 13) true 
    else if ( (minilist(0) == 1) && (minilist(minilist.length - 2) == 12) && minilist(minilist.length-1) == 13) true
  	else flushfinder(minilist, cnt + 1)
  }
  
 def runkiller : Boolean = { 
    minilists
    var multiples = clist ++ dlist ++ hlist ++ slist
    var ofakind = multiples.diff(multiples.distinct).distinct
    if (ofakind.isEmpty) false
    else {
    def loop(cnt: Int) : Boolean = 
      if (cnt < 0) false
      else if (multiples.count(_ == ofakind(cnt)) > 2) true
      else loop(cnt -1)
    
    loop(ofakind.length-1)
    }
  }  
    
      
	def playopt : Boolean = {
	  if (runkiller || flushfinder(clist,0) || flushfinder(dlist,0) || flushfinder(hlist,0) 
	      || flushfinder(slist,0) ) true 
	  else false
	}
	
	/**********************************
	def playnec : Boolean = {
	  minilists
	  if ( runkiller && deck.length <= 4 ) deck.forall(_.suitnum == deck(0).suitnum)
	  else true // I dont know about this. . .
	}
  	********************************/
  def printhand = {
    var (displaystring: List[String]) = List[String]("|")
    for (i <- 0 to (deck.length - 1)) {
      displaystring = displaystring :::  i.toString + ":" :: deck(i).display :: " | " :: Nil 
    }
  
    println( displaystring.mkString(" ") )    
     
  }
 
  def disCARD(that: HAND, crd: Int) = {
    that.deck += this.deck(crd)
    this.deck.remove(crd)
  }
  
  def GiveRandomCARD (that: HAND) = {
    disCARD(that, select.nextInt(this.deck.length - 1))
    that.reorder // we only use this to discard to a player deck
    
  }
  
  def copyover(that:HAND, start: List[Int]) = {
    for (i <- 0 to (start.length -1)) that.deck += this.deck(start(i))
  }
  
  def clearhand = deck.remove(0,deck.length)
 
  def Play2Dscrd (that:HAND)= {
   
    println("\nchoose the card you want to discard from your pile:\n")
    this.printhand
    var selection = scala.io.StdIn.readInt()
    if ((selection < this.deck.length) && (selection >= 0) ) this.disCARD(that,selection) 
    else while ( (selection > this.deck.length) || (selection < 0)){
      println("\nChoose a card that is inside your hand (b/t 0 and "+(this.deck.length)+")\n")
      println("\nPlayer hand contains: ")
      this.cardIDs
      this.printhand
      selection = scala.io.StdIn.readInt()
          }    
  }
  
  def test (list: List[HAND]) : Boolean = {
    if (list.isEmpty) false
    else{
      this.minilists
      list.head.minilists
      if (list.head.runkiller) {
        (this.clist ++= this.dlist ++= this.hlist ++= 
          this.slist).exists(x => x == list(0).deck(0).suitnum) || 
          this.test(list.tail)
      }
      else list.head.deck(0).suit match {
        case "club" => runMatch(list.head.clist, this.clist) || this.test(list.tail)
        case "diamond" => runMatch(list.head.dlist, this.dlist) || this.test(list.tail)
        case "heart" => runMatch(list.head.hlist, this.hlist) || this.test(list.tail)
        case "spade" => runMatch(list.head.slist, this.slist) || this.test(list.tail)
      }
    }
  }
  
 def runMatch (minilistTHAT: ListBuffer[Int], minilistTHIS: ListBuffer[Int]) : Boolean =  {
    ( minilistTHIS.exists(x => x == minilistTHAT.min -2) && minilistTHIS.exists(x => (x == minilistTHAT.min-1))) || 
    minilistTHIS.exists(x => x == minilistTHAT.min-1) || minilistTHIS.exists(x => x == minilistTHAT.max+1)  || 
    (minilistTHIS.exists(x=> x == minilistTHAT.max+2) && minilistTHIS.exists(x=> x == minilistTHAT.max+1) ) ||
    ((minilistTHAT.min == 1 && minilistTHIS.exists(x => x == 13) && minilistTHIS.exists(x => x == 12) ) ||
    (minilistTHAT.min == 1 && minilistTHIS.exists(x=> x == 13)) ) ||
    (minilistTHAT.min == 1 && minilistTHIS.exists(x => x == 13) && minilistTHIS.exists(x => x == 2) )
  }
 
}



object objexpmt extends App{
  
  
 /************create a deck of ordered cards to play ***************     
  *******************************************************************/
  
	def cardmaker (): ListBuffer[card] = {
		val face = List("2","3","4","5","6","7","8","9","10","J","Q","K","A")
		val suits = List("club", "diamond", "heart", "spade" )
		
		var f: String = ""
		var s: String = ""
		var count: Int = 0
		var deck_in_prog = ListBuffer[card]()

		
		for (i <- 0 to (suits.length -1)){
  		s = suits(i)
    	for (j <- 0 to (face.length - 1)) {
      	
      	f = face(j)
				var currentcard = new card(suits(i),j+1,f,count)
      	deck_in_prog = deck_in_prog += currentcard
      	count = count + 1
			}
		}
		
		deck_in_prog
	}                                        


/*********************declaring variables necessary to play a game*************************/
		
  var game = new HAND(cardmaker()) // Game begins with all cards in this HAND     
  var player = new HAND(ListBuffer[card]())       
	var discardpile = new HAND(ListBuffer[card]())
  //var pointpile =  new HAND(ListBuffer[card]()) 
  var ghost = new HAND(ListBuffer[card]())
  var pointlist = List(new HAND(ListBuffer[card]()))
  
/**********************Deal the Player in***************************/	
  
  game.GiveRandomCARD(discardpile)
	for (i <- 1 to 7) game.GiveRandomCARD(player)
  game.reorder
	
  println("Discard pile contains: ")
  discardpile.printhand 
  println("\nPlayer hand contains: ")
  player.printhand

  
  var keepsorting = true
  
  
  sealed abstract class Menu {
    def menu()
    
  }

  case object DrawFrmDeck extends Menu {
    def menu() = {
    println("Drew from Deck:")
    game.GiveRandomCARD(player)
    game.reorder // remember to reorder the game deck every time it is manipulated
    println("Discard pile contains: ")
    discardpile.printhand 
    println("Now Player hand contains: ")
    player.printhand
    if (pointlist(0).deck.length > 0) {
      println("pointpile contains: ")
      pointlist.map(x => x.printhand) 
    }
    
    
    if  (player.playopt){  
    println("Would you like to play cards in your hand?")
      if (scala.io.StdIn.readBoolean()) {
              println("Please list the cards you would like to play using a comma delimited list like this:")
        println("x,y,z")
        
        var playlist = scala.io.StdIn.readLine().split(",").map(_.toInt).toList
        
        while ( (playlist.max >= player.deck.length) || (playlist.min < 0))  {
          println(s"please choose between 0 and ${player.deck.length-1}" )
          playlist = scala.io.StdIn.readLine().split(",").map(_.toInt).toList
        }
        
        if (ghost.deck.length > 0) ghost.clearhand
        player.copyover(ghost, playlist) 
               
        if (ghost.playopt|| ghost.test(pointlist) ) {  //sufficient but strict enough to be necessary
          if (pointlist.length != 1 ) pointlist ++= List(new HAND(ListBuffer[card]()))
          var crdval2mv = List[Int]()
          player.cardIDs      
          crdval2mv = playlist.map( x => player.decklist(x)) 
          //above finds the deckID of each of the player's hands
          
         for (a <- 0 to (playlist.length -1)) {         
           player.cardIDs          
           player.disCARD(pointlist(pointlist.length -1),player.decklist.indexOf(crdval2mv(a)))  //and delete these cards using remove
         } // finds the INDEX of the selected card's VALUE ^^^^^^^^^^^^^^       
         ghost.clearhand
          }       
        else {
          println("that selection is not a flush or straight with the point pile")
          ghost.clearhand
        }
      } 
    }
    player Play2Dscrd discardpile 
    } 
    
    override def toString = "1 - Draw from Deck"    
  }

  case object DrawFromDiscard extends Menu {
    
    def menu() = {
    println("Draw from Discard Pile:")
    
    println("Player hand contains: ")
    player.printhand
    println("Discard pile contains: ")
    discardpile.printhand
    if (pointlist(0).deck.length > 0) {
      println("pointpile contains: ")
      pointlist.map(x => x.printhand) 
    }
    
    if (ghost.deck.length > 0) ghost.clearhand //prep ghost hand
    
    println("Choose a bottom card from the discard pile")
    println("Leftmost card is beneath the cards to the right of it")
    var bottomcard = scala.io.StdIn.readInt() 
    
    player.copyover(ghost, List.range(0,player.deck.length))
    discardpile copyover (ghost,List.range(bottomcard,discardpile.deck.length))
    
    if (ghost.playopt || ghost.test(pointlist)){
      discardpile.cardIDs
      var dscrdrange = List.range(bottomcard,discardpile.deck.length)
      var transferIDS = dscrdrange.map( x => discardpile.decklist(x))
      for (a <- 0 to (transferIDS.length -1)) { 
           discardpile.cardIDs          
           discardpile.disCARD(player,discardpile.decklist.indexOf(transferIDS(a)))
         }
      bottomcard = transferIDS(0)
      player.reorder
      player.cardIDs
      println("Player hand now contains:")
      player.printhand
      
      println("Please list the cards you would like to play using a comma delimited list like this:")
      println("x,y,z")
      var playlist = scala.io.StdIn.readLine().split(",").map(_.toInt).toList
        
        while ( (playlist.max >= player.deck.length) || (playlist.min < 0))  {
          println(s"please choose between 0 and ${player.deck.length-1}" )
          playlist = scala.io.StdIn.readLine().split(",").map(_.toInt).toList
        }
        
        player.copyover(ghost, playlist) 
        ghost.cardIDs
        
        while ( !ghost.decklist.exists( x => x == bottomcard))   {
          ghost.clearhand
          println("The bottom card you selected must be put into play, it was:" )
          print(player.deck(player.decklist.indexOf(bottomcard)).display +"\n")
          println("Please list the cards you would like to play using a comma delimited list like this:")
          println("x,y,z")
          println("Make sure to include card #" + player.decklist.indexOf(bottomcard))
          playlist = scala.io.StdIn.readLine().split(",").map(_.toInt).toList
          player.copyover(ghost, playlist) 
          ghost.cardIDs    
        }
        
          if (ghost.playopt || ghost.test(pointlist)) {  //sufficient but not strict enough to be necessary
          
          if (pointlist.length != 1 ) pointlist ++= List(new HAND(ListBuffer[card]())) // can't pass to a method. . .
          
          var crdval2mv = List[Int]()
          player.cardIDs      
          crdval2mv = playlist.map( x => player.decklist(x)) 
          //above finds the deckID of each of the player's hands
          
         for (a <- 0 to (playlist.length -1)) {         
           player.cardIDs          
           player.disCARD(pointlist(pointlist.length -1),player.decklist.indexOf(crdval2mv(a)))  //and delete these cards using remove
         } // finds the INDEX of the selected card's VALUE ^^^^^^^^^^^^^^       
         ghost.clearhand
          }       
        else {
          println("that selection is not a flush or straight with the point pile")
          ghost.clearhand
        }
      player.Play2Dscrd(discardpile)
    }
    else{
    println("The card you chose isn't valid")
    }
    
    }
   override def toString = "2 - Draw from Discard Pile"
    
 }

  case object Quit extends Menu {
    def menu() = { println("Thanks for playing!")
      keepsorting = false
    }
    override def toString = "3 - Quit"
    
  }
  while (keepsorting) {
    
  def Menu = "\nPlease select one of the following:\n" + 
                Seq(DrawFrmDeck, DrawFromDiscard, Quit).mkString(" | ")

  if (player.deck.length <= 0 || game.deck.length < 1) { println("round over")
    keepsorting = false
    }              
  
  else {
    
    println(Menu)

    io.StdIn.readInt match {
      case 1 => DrawFrmDeck menu
      case 2 => DrawFromDiscard menu
      case 3 => Quit menu
      case _ => println ("That wasn't an option.  Thanks for playing"); keepsorting = false
    }
  }
  }  


}
