import scala.collection.mutable.ListBuffer
import scala.io.StdIn.{readLine, readInt}

class card(a: String, b: Int, c: String, d: Int){

  def suit = a
  def suitnum = b
  def face = c
  def decknum = d

def display = face + " of " + suit + "s"  


}



class HAND(cards: ListBuffer[card]){
	val select = scala.util.Random
	def deck = cards
	var decklist: ListBuffer[Int] = ListBuffer()
	
	var clist: ListBuffer[Int] = ListBuffer()
	var dlist: ListBuffer[Int] = ListBuffer()
	var hlist: ListBuffer[Int] = ListBuffer()
	var slist: ListBuffer[Int] = ListBuffer()
	
	
	def cardIDs  = {
		decklist.remove(0,decklist.length) //first clear if anything is in there
		for (i <- 0 to (deck.length -1)){
  	decklist = decklist += (deck(i).decknum)
  	}
  }
	
	def reorder = {
    cardIDs
    for (i <- 0 to (deck.length -1)){
      var sortdeck = decklist.sorted
      var crd: Int = sortdeck(i)
      this.deck += this.deck(decklist.indexOf(crd)) 
  	  
  	}
    this.deck.remove(0,decklist.length)
  }
	
	def minilists = {
	  reorder
	  clist.remove(0,clist.length)  //first clear if anything is in there
		dlist.remove(0,dlist.length)  
	  hlist.remove(0,hlist.length)
	  slist.remove(0,slist.length)
	  
	  for (i <- 0 to (deck.length -1)){
		    if (deck.length < 0) println("Serious problem here")
		    else if (deck(i).suit == "club" )
  	      clist = clist += (deck(i).suitnum)
  	    else if (deck(i).suit == "diamond" )
  	      dlist = dlist += (deck(i).suitnum)
	      else if (deck(i).suit == "heart" )
  	      hlist = hlist += (deck(i).suitnum)
	      else if (deck(i).suit == "spade" )
  	      slist = slist += (deck(i).suitnum) 	          
	  }
	  
	}
	
  def flushfinder( minilist: ListBuffer[Int], cnt: Int): Boolean = {
    minilists
  	if ((cnt == minilist.length - 2) || (minilist.length < 3)) false
  	else if ( (minilist(cnt)+1 == minilist(cnt+1))  && (minilist(cnt)+2 == minilist(cnt+2))  ) true
  	else if ( (minilist(minilist.length-1) + 1 == minilist(0) ) && (minilist(minilist.length-1) + 2 == minilist(1)) ) true
  	else if ( (minilist(minilist.length-2) + 1 == minilist(minilist.length-1) ) && (minilist(minilist.length-2) + 2 == minilist(0)) ) true
  	else flushfinder(minilist, cnt + 1)
  }
  
 def runkiller : Boolean = { 
    minilists
    var multiples = clist ++ dlist ++ hlist ++ slist
    var ofakind = multiples.diff(multiples.distinct).distinct
    def loop(cnt: Int) : Boolean = 
      if (cnt == 0) false
      else if (multiples.count(_ == ofakind(cnt)) > 2) true
      else loop(cnt -1)
    
    loop(ofakind.length-1)
  }  
      
	def playopt = {
	  if (flushfinder(clist,0) || flushfinder(dlist,0) || flushfinder(hlist,0) 
	      || flushfinder(slist,0) ) true // FIX RUNKILLER
	  else false
	}
  	
  def printhand = {
    var (displaystring: List[String]) = List[String]("|")
    for (i <- 0 to (deck.length - 1)) {
      displaystring = displaystring :::  i.toString + ":" :: deck(i).display :: " | " :: Nil 
    }
  
    println( displaystring.mkString(" ") )    
     
  }
 
  def disCARD(that: HAND, crd: Int) = {
    that.deck += this.deck(crd)
    this.deck.remove(crd)
    this.reorder  
    that.cardIDs
  }
  
  def GiveRandomCARD (that: HAND) = {
    disCARD(that, select.nextInt(this.deck.length - 1))
    that.reorder
    
  }
 
  def Play2Dscrd (that:HAND)= {
    println("\nchoose the card you want to discard from your pile\n")
    var snafu = scala.io.StdIn.readInt()
    if ((snafu < this.deck.length) && (snafu >= 0) ) this.disCARD(that,snafu) 
    else while ( (snafu > this.deck.length) || (snafu < 0)){
      println("\nChoose a card that is inside your hand (b/t 0 and "+(this.deck.length)+")\n")
      println("\nPlayer hand contains: ")
      this.printhand
      snafu = scala.io.StdIn.readInt()
          }    
    
  }
  
  
}






object objexpmt extends App{
  
  
 /************create a deck of ordered cards to play ***************     
  *******************************************************************/
  
	def cardmaker (): ListBuffer[card] = {
		val face = List("2","3","4","5","6","7","8","9","10","J","Q","K","A")
		val suits = List("club", "diamond", "heart", "spade" )
		
		var f: String = ""
		var s: String = ""
		var count: Int = 0
		var deck_in_prog = ListBuffer[card]()

		
		for (i <- 0 to (suits.length -1)){
  		s = suits(i)
    	for (j <- 0 to (face.length - 1)) {
      	count = count + 1
      	f = face(j)
				var currentcard = new card(suits(i),j+1,f,count)
      	deck_in_prog = deck_in_prog += currentcard
      	
			}
		}
		
		deck_in_prog
	}                                        


/*********************declaring variables necessary to play a game*************************/
		
  var game = new HAND(cardmaker()) // Game begins with all cards in this HAND     
  var player = new HAND(ListBuffer[card]())       
	var discardpile = new HAND(ListBuffer[card]())
	var pointpile = new HAND(ListBuffer[card]())
                                                 
/**********************Deal the Player in***************************/	
  
  game.GiveRandomCARD(discardpile)
	for (i <- 1 to 15) game.GiveRandomCARD(player)
  game.cardIDs
  game.decklist


 
  println("Discard pile contains: ")
  discardpile.printhand 
  println("\nPlayer hand contains: ")
  player.printhand

  
  var fubar = true
  
  
  sealed abstract class Menu {
    def menu()
    
  }

  case object DrawFrmDeck extends Menu {
    def menu() = {
    println("Drew from Deck:")
    game.GiveRandomCARD(player)
    println("Discard pile contains: ")
    discardpile.printhand 
    println("\nNow Player hand contains: ")
    player.printhand
    
    //Now if there is a playable hand there should be the option to play it
    if (player.runkiller || player.playopt){ 
    println("Would you like to play cards in your hand?")
      if (scala.io.StdIn.readBoolean()) {
        println("Gotta code a way to earn points now")
      
            
    /******************************************************************
     * Probably: enter a comma delimited list of the cards you want to play
     * convert it to an imaginary hand
     * have runkiller and playopt evaluate it
     * if true, throw the cards into the pointpile
     ******************************************************************/
     
    
    
      player.Play2Dscrd(discardpile)
      } 
      else {player Play2Dscrd discardpile}       
      }
    } 
    
    override def toString = "1 - Draw from Deck"    
  }

  case object DrawFromDiscard extends Menu {
    def menu() = println("selected 2") 
    
        /******************************************************************
     * Probably: enter the leftmost card you want to play
     * convert that + everything to the right into a hand + player
     * have runkiller and playopt evaluate jumbo hand
     * now run earn points with your new jumbo hand : 
     * a comma delimited list of the cards you want to play
     * if true, throw the cards into the pointpile
     ******************************************************************/

    
    
    override def toString = "2 - Draw from Discard Pile"
  }

  case object Quit extends Menu {
    def menu() = { println("Thanks for playing!")
      fubar = false
    }
    override def toString = "3 - quit"
    
  }
  while (fubar) {
  def Menu = "\nPlease select one of the following:\n" + 
                Seq(DrawFrmDeck, DrawFromDiscard, Quit).mkString(" | ")

                
  if (player.deck.length <= 0) { println("round over")}
  else {
    
    println(Menu)

    io.StdIn.readInt match {
      case 1 => DrawFrmDeck menu
      case 2 => DrawFromDiscard menu
      case 3 => Quit menu
      case _ => fubar = false
    }
  }
  }  


}
